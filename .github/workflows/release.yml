name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run full test suite
      run: |
        npm run typecheck
        npm run lint:check
        npm test
        npm run build
    
    - name: Validate version format
      run: |
        if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "✅ Valid version tag: ${{ github.ref_name }}"
        else
          echo "❌ Invalid version tag format. Expected: vX.Y.Z"
          exit 1
        fi

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate release notes
      id: release-notes
      run: |
        echo "# SynAI ${{ github.ref_name }}" > release-notes.md
        echo "" >> release-notes.md
        
        # Get commits since last tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
        if [ -n "$PREV_TAG" ]; then
          echo "## What's Changed" >> release-notes.md
          echo "" >> release-notes.md
          
          # Group commits by type
          echo "### ✨ Features" >> release-notes.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -E "^- (feat|feature)" >> release-notes.md || echo "_No new features_" >> release-notes.md
          echo "" >> release-notes.md
          
          echo "### 🐛 Bug Fixes" >> release-notes.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -E "^- (fix|bug)" >> release-notes.md || echo "_No bug fixes_" >> release-notes.md
          echo "" >> release-notes.md
          
          echo "### 📚 Documentation" >> release-notes.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -E "^- (docs|doc)" >> release-notes.md || echo "_No documentation updates_" >> release-notes.md
          echo "" >> release-notes.md
          
          echo "### 🔧 Other Changes" >> release-notes.md
          git log --pretty=format:"- %s" $PREV_TAG..HEAD | grep -vE "^- (feat|feature|fix|bug|docs|doc)" >> release-notes.md || echo "_No other changes_" >> release-notes.md
        else
          echo "## Initial Release" >> release-notes.md
          echo "" >> release-notes.md
          echo "First official release of SynAI - Enterprise-grade multi-provider AI chat interface." >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ github.ref_name }}" >> release-notes.md
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: SynAI ${{ github.ref_name }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}

  deploy-production:
    name: Deploy Production Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
    
    - name: Deploy to Vercel (Production)
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        npm install --global vercel@latest
        vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "🚀 Production release deployed to: $DEPLOYMENT_URL"